---
weight: 10
title: Creative coding
---

* Creative coding

** Introduction

* Mental objectives

Students will acquire comprehensive knowledge about computer music and
music technology and will learn theory, methods and techniques in order to
create and manipulate. This course will teach the basic
elements of programming in general (logic, loops, functions, objects,
classes). They will also be trained in program units analysis for both
the production of audio events and the control of their features and
behavior through control units such as MIDI keyboards, motion,
etc. SuperCollider is a platform for sound synthesis and algorithmic
composition, Used by musicians, artists and researchers working with
sound. Through the experimentation with these tools, they will
understand the concepts of *object-oriented programming,
interactivity, interactive sound and design, connectivity and
interconnection*

Through the musical examples provided in this lesson, they will
prepare students to program in C ++, Java and other languages. In
addition, they will understand the term interdisciplinarity and will
learn to link the science of music with physics, engineering and programming. In this way students will learn techniques and tools that can also be used in other digital forms of art and entertainment such as arts facilities, video games and the art of the Internet.

*Key words:*  audio design, dynamic systems, interactive multimedia,
interactive performance, installations, sensors, sharing. 



* Methodology and tools

The workshop will teach how different environments work in relation to the implementation of ideas as well as applications for communication, organization and collaboration.

They will be trained in creative programming environments:

Emacs as a basic editor and Git file sharing
(https://github.com/magit/magit), 

SuperCollider, and Python for data analysis and interpretation.

More on input devices 

- midi controllers, 
- OSC communication,
- microcontrollers (arduino),
and physical computing,
- sensor usage, 
- multitouch technologies, etc. 

More on organising and sharing projects using tools such as mass communication techniques Slack-Git.

* Key words:

creative-coding,
interactiation, real-time, web, streaming, data, big-data, machine learning 

* Creative Coding

** Interactive installations


 
circuits and how to hack them. A great opportunity to learn, design, recycle old toys and instruments, and leave with a bespoke instrument.

** Machine learning



** Input Devices


Musical gestures can be expressed through a wide range of body
movements. Dozens of input devices have been developed to capture
these gestures. (Roads 1996: 625)

#+BEGIN_QUOTE
Switch
Push buttons
Linear potentiometer or fader
Trackball
Joystick
Game Paddles
etc
#+END_QUOTE
** Instrument design

How to...

[[http://bela.io][Bela]]


Capacitive touch sensor-raspberry pi

[[https://learn.adafruit.com/mpr121-capacitive-touch-sensor-on-raspberry-pi-and-beaglebone-black/overview][MPR121]] 




** Mapping the Data from the Input Device

The message coming from digital input devices are streams of binary
numbers. A microprocessor inside the receiving symthesizer must decode
these streams before commanding the synthesis engine  to emit
sound. (Roads 1996: 625)


** Remote Controllers


* SuperCollider

** Basics

SuperCollider is a platform for audio synthesis and algorithmic composition, used by musicians, artists, and researchers working with sound. It is free and open source software available for Windows, macOS, and Linux.

** SuperCollider features three major components:

- *scsynth*, a real-time audio server, forms the core of the platform. It features 400+ unit generators ("UGens") for analysis, synthesis, and processing. Its granularity allows the fluid combination of many known and unknown audio techniques, moving between additive and subtractive synthesis, FM, granular synthesis, FFT, and physical modelling. You can write your own UGens in C++, and users have already contributed several hundred more to the sc3-plugins repository.
- *sclang*, an interpreted programming language. It is focused on sound, but not limited to any specific domain. sclang controls scsynth via Open Sound Control. You can use it for algorithmic composition and sequencing, finding new sound synthesis methods, connecting your app to external hardware including MIDI controllers, network music, writing GUIs and visual displays, or for your daily programming experiments. It has a stock of user-contributed extensions called Quarks.
- *scide* is an editor for sclang with an integrated help system.

** Nodes

The Server has a graph of all the running Synths, which may be organised into Groups for convenience. You can see Synths and Groups being created just by looking at the Server graphics.

A Node means a Synth or a Group. Whenever you press command+period you reset the graph, cleaning out all the Synths and Groups you added, that is, clearing all Nodes.

The initial state of the Node graph on the Server looks like this (do command+period first to destroy any existing nodes so you have the starting state):

#+BEGIN_SRC js
s.queryAllNodes //run me to see the Nodes on the Server
#+END_SRC

The two default Nodes are convenient Groups for putting your Synths into.

Group(0) is the absolute root of the tree. All new Synths get placed within this Group somewhere (they might be in subGroups but they will be within the RootNode Group at the top of the hierarchy).

#+BEGIN_SRC js
r=RootNode.new; //this gets a reference to Group(0)
#+END_SRC

Group(1) was added as an additional default to receive all created Synths, to avoid cluttering the base of the tree.

#+BEGIN_SRC js
Group.basicNew(s, 1); //this gets a reference to Group(1)
#+END_SRC


** Find recordings folder

#+BEGIN_SRC js
thisProcess.platform.recordingsDir;
#+END_SRC


** Beat frequency

Beat Frequency is a term used in acoustic science and physics and it is caused when two signals with different frequency or period, play together. In a few words this phenomena caused when you overlap two waves with different frequencies.

For example, lets say that we have a 440 Hz wave and a 443 Hz wave play together.

They will have fluctuations in loudness. see Fig.1 below.
It is possible to measure the wobbles per second that are caused of that combination. So, how many times these wobbles happen form Constructive: Constructive is the area where these two waves come together in the exact point of the x and y axis (Fig 1) and that means that the signal is getting louder to the next Constructive area.

 The frequency of those beats $Fb$ can be calculated using this formula:

\begin{align*}
 Fb = f1 - f2
\end{align*}


where $f1$ is the period in time of the /wave 1/ and $f2$ is the period of the /wave 2/.


This is how it sounds in SuperCollider.

#+BEGIN_SRC js

{SinOsc.ar([440, 443], 0, 0.5)}.scope;
#+END_SRC

Check this also with:

#+BEGIN_SRC js
FreqScope.new;
#+END_SRC


Introduction to sound design (origin, definition, procedures, application fields).
In this course, students will learn about sound design and functions in SuperCollider programming environment.

#+BEGIN_QUOTE
SuperCollider example:
Creating a sine wave
#+END_QUOTE


#+BEGIN_SRC js
{SinOsc.ar(440, 0, 0.3)}.play
#+END_SRC

#+BEGIN_QUOTE
Additive synthesis
#+END_QUOTE
#+BEGIN_SRC js
{SinOsc.ar(440, 0, 0.4)+SinOsc.ar(660, 0, 0.3)}.play;
#+END_SRC

#+BEGIN_QUOTE
Subtractive synthesis
#+END_QUOTE

#+BEGIN_SRC js
{LPF.ar(SinOsc.ar(440, 0, 0.4), 6000, 0.3)}.play;
#+END_SRC

#+BEGIN_QUOTE
Granular synthesis
#+END_QUOTE

#+BEGIN_SRC js

SynthDef(\granular, {|out = 0, trig = 1, dur = 0.1, sndbuf, pos = 0.2, 
rate = 1, pan = 0, amp = 0.4|
var env, source;
env = EnvGen.kr(Env.adsr, 1, doneAcion: 2);
source = Out.ar(out, GrainBuf.ar(2, Impulse.kr(trig), dur, sndbuf, rate, pos, 2,
pan, envbuf) * env)
}).add;

#+END_SRC

* Emacs

** Install packages

Install org-plus-contrib

#+BEGIN_SRC emacs-lisp

;; add this to your Emacs init file to be able to list the Org mode archives:

(require 'package)

(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)

Then M-x list-packages RET will list both the latest org and
org-plus-contrib packages.

#+END_SRC
** Org-mode

** Create Headers

Start with an *asterisk* to make *Headers* and *two asterisks* for *Subheaders*

Example:

=/* Header/=

=/** Subheader/=

Give a *title* to your page using /hash/ (#) and /plus/ (+) symbols

Example: =/#+Title: Getting started with org-mode/=

#+Title: Getting started with org-mode

*Hide* Table of Contents

Example: =/#+Options: toc:nil/=

#+Options: toc:nil

*Hide* Numbers, table of contents

Example: =/#+Options: num:nil/ toc:nil=

Write =#+= and press =Meta-<tab>= to see the list of variables

Example:

 =#+AUTHOR: Vasilis Agiomyrgianakis=

=#+DATE: 120416=

** Bulleting-Quoting

Use hyphen to make bullets

- bulleted
- list
- items

You can include quotations in Org mode documents like this:

=#+BEGIN_QUOTE=

'QUATATION'

=#+END_QUOTE=

#+BEGIN_QUOTE

A frequent criticism of computer music is the lack of performance, \\
where an artist hides behind their laptop screen, \\
and the audience is unable to see any activity that might ground their experience \\
of the music (Cascone, 2003).


#+END_QUOTE

** Markups

Give *emphasis* to your text.

Write your text *inside* the below symbols:

- 2 asterics for *Bold*,
- 2 slashes for /italics/,
- 2 equals signs for =verbatim=,
- 2 pluses for +strike through text+


*Bold*, /italics/, =verbatim=, +strikethrough+
** Linked text

 Press =C-c C-l= to *link* objects (files)

Example:

/Link: https//:basmyr.net/

Then give a name to the linked text

/Description: Basmyr.net/

 Press =C-c C-o= to *open* the linked plain text with external program

[[http://basmyr.net][Basmyr.net]]

or a video url

[[https://youtu.be/Wr2aFlWyzvM][Granulator]]

** Tables

Use *pipes - vertical bars* to make tables

Example: Start with pipes and some text:
/| some | | Data |/

then hit return, pipe (vertical bar), hyphen and tab to extend the table verticaly

Press tab and arrows to make arrangements for the table

| Some | Data  |
|------+-------|
|  234 | rocks |
| 1200 | start |

** Images & Graphics
** Images

** Ditaa

*Find the path of ditaa.jar in you computer through a lisp program*

=C-c C-c= to evaluate lisp code inside source block

#+BEGIN_SRC emacs-lisp

(expand-file-name
             "ditaa.jar"
      (file-name-as-directory
            (expand-file-name
                "scripts"
               (file-name-as-directory
                  (expand-file-name
                      "../contrib"
                     (file-name-directory (org-find-library-dir "org")))))))
#+END_SRC


** Export to other formats

Pressing =C-c C-e= popups a buffer to *export* markups to HTML-PDF-etc.

Example: hit =h= and =o= if you want to *export and open as html*.

Export Beamer: =C-c C-e l P=     =(org-beamer-export-to-pdf)=

Export as LaTeX and then process to PDF.

=C-c C-e l O=

Export as LaTeX and then process to PDF, then open the resulting PDF file.

** Source Code

Create code blocks to insert your code.

Press C-c ' *inside the SRC block* to edit the current code block

in the mode of the language you want. For instance:

 =#+BEGIN_SRC emacs-lisp=

write some lisp to make your configurations in org-mode

so as to see bullets (UTF-8 characters) when you editing *Headers* in org-mode instead of asterisks.

Then close the source block with:

=#+END_SRC=

*Result*

#+BEGIN_SRC emacs-lisp

     (require 'org-bullets)
(add-hook 'org-mode-hook
          (lambda () (org-bullets-mode 1)))


#+END_SRC

*You can customise source blocks using =M-x customize-face RET= face RET*

Evaluate source code. Press C-c C-c inside the block and see the results.

 #+BEGIN_Example
 echo "Hello $USER! Today is `date`"
 exit
 #+END_Example

** LaTeX integrator

- Characters: \alpha \rightarrow \beta
- $O(n \log n)$


\begin{align*}
q = 2 * 4 + 1 - 2 &= 7 \\
         q &=7
\end{align*}

** Shortcuts

write down =<s= and press =tab= to open src blocks

to cooment a =lisp= region select a word or a region with C-M-space and then M-; to comment

** Tips

To open week-agenda window press C-ca
To schedule a TODO item press C-c C-s
Use shift-arrows to change dates

#+BEGIN_SRC emacs-lisp

;; placed in init.el


(require 'org)
(setq exec-path (append exec-path '("/usr/texbin")))
(require 'ox-latex)
(unless (boundp 'org-latex-classes)
  (setq org-latex-classes nil))
(add-to-list 'org-latex-classes
             '("article"
               "\\documentclass{article}"
               ("\\section{%s}" . "\\section*{%s}")))

;;(setq org-latex-listings 'minted)

(add-to-list 'org-latex-packages-alist '("" "minted"))



(setq org-export-latex-listings 'minted)

(setq org-latex-listings 'minted)

(setq org-latex-custom-lang-environments
      '(
        (emacs-lisp "common-lispcode")
        ))
(setq org-latex-minted-options
      '(("frame" "lines")
        ("fontsize" "\\scriptsize")
        ("linenos" "")))


(setq org-latex-to-pdf-process



      '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"

        ))



(org-babel-do-load-languages
 'org-babel-load-languages
 '((R . t)
   (latex . t)))
;; Use syntax highlighting in source block while editing


(setq org-src-fontify-natively t)

;;auto-complete

(require 'auto-complete)

;; Loads latex auto-complete
(require 'ac-math)
(add-to-list 'ac-modes 'latex-mode)
(defun ac-latex-mode-setup ()
  (setq ac-sources
        (append '(ac-source-math-latex ac-source-latex-commands  ac-source-math-unicode)
                ac-sources))
  )
(add-hook 'LaTeX-mode-hook 'ac-latex-mode-setup)

#+END_SRC



Find more here: [[http://orgmode.org/worg/org-tutorials/org-latex-preview.html][Minted]]


** Github
Introduction to Environments (Github, Bitbucket) for organizing and sharing files-Git.
Set up an account with Slack and Github.

#+BEGIN_QUOTE
Github
#+END_QUOTE

 organize projects and share the
individual processes using tools such as mass communication techniques
Slack-Git.

 
** install package magit

Backup rep online in GITLAB, BITBUCKET

create an ssh key to gain access into your repositories in Bitbucker

 Concatanate keys from term

ie. //cat id_rsa.pub | pbcopy


Press =C-x m= to display information about the current Git repository

=P-p= to push rep to bitbucket

=c-c= to commint

=s= to stage rep


 
** Create and concatenate (link) keys from term

create an shh key in GitHub and then open terminal

ie. //cat id_rsa.pub | pbcopy

 
** create .git file inside a folder

Dired to the folder you want to create the .git file and press

=M-x magit-init= and press =y=

 This is a way to say to projectile what is a project and so it will

make your search quicker.

Press =C-cpp= to open projectile


Create a new branch

and then =magit-set-to-upstream= origin


** Pull requests

*issues*

- Git refusing to merge unrelated histories

git cherry-pick -m 1 1234deadbeef1234deadbeef
git rebase --continue

merge

Git failed...

Git refusing to merge unrelated histories

in magit press h to bring the popoup and choose rebase -r and then -p

** Auto-correct

 
** Install Dictionaries -emacs

*Install aspell from brew*

#+BEGIN_Example

$ brew install aspell --with-lang-en --with-lang-el --with-lang-de

#+END_Example

for English, Hellenic and Deutsch languages.

if you have problems installing aspell with the above code

just do only:

#+BEGIN_SRC shell

$ brew install aspell

#+END_SRC

*Install aspell using downloaded packages aspell-0.60.6.1*

go to terminal and type:

#+BEGIN_SRC shell
$ cd ~/aspell path
$ ./configure
$ make
$ make install
#+END_SRC

To install additional dictionary download the language you prefer from  [[ftp://ftp.gnu.org/gnu/aspell/dict/0index.html][GNU_Available Aspell Dictionaries]]

i.e =aspell-el-0.50-3= for Hellenic language (Greek)

and go to terminal and type:

#+BEGIN_SRC shell
$ cd ~/dictionary path
$ ./configure
$ make
$ install
#+END_SRC

*Switch dictionary*

To switch between dictionaries run:

M-x: =ispell-change-dictionary=

and write /greek/ for Hellenic language auto-correct

Press F6 (fn-F6) to switch between dictionaries (british, greek, german)

If you want to use the english dictionary in a particular buffer instead,
put the following on the first line of the buffer:

=-*- ispell-dictionary: "english" -*-=

*Use flyspell instead of ispell*

#+BEGIN_SRC lisp
(setq ispell-list-command "--list")
#+END_SRC
 
** text expansion

install YASnippet using MELPA

put the below into your init.el

#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path
             "~/.emacs.d/plugins/yasnippet")
(require 'yasnippet)
(yas-global-mode 1)
#+END_SRC

quit emacs and open again and type

=M-x yas-new-snippet=

- Give a name to your snippet
- give the abrev
- write your text or code you want to be expanted
- save file C-c C-c
- choose a table i.e prog-mode
- give a name to your snippet (I use the abrev key as the name)

try using the abrev key and press tab to expant your text.


** Searching Help


C-h f (or M-x describe-function) will show you the bindings for a command.
You are correct, C-h b (or M-x describe-bindings) will show you all bindings. C-h m (M-x describe-mode) is also handy to list bindings by mode.
You might also try C-h k (M-x describe-key) to show what command is bound to a key. For instance, on my machine save-buffers-kill-emacs isn't bound to anything, but C-h k C-x C-c tells me that C-x C-c is bound to save-buffers-kill-terminal. It will list all bindings for the command at the same time.


helm swoop

help C-h

 
** Export references to pdf with org-mode - bibtex

Use bibtex package for citation.

First put the bellow code in your ./emacs



** IPython-notebook

- IPython notebook is used to analyse data and for data visualisation.

Experiment with the examples of
CERN: /particle-physics-playground-playground-52de62d/
- install ipython emacs on melpa 'ein'

copy =ein.el= and =ein.py= to the upload directory

- open =init.el= and write

#+BEGIN_SRC emacs-lisp
(require 'ein)
#+END_SRC

** Python 3.5

install =python 3.5= and anacoda3
call anacoda3 form terminal using

#+BEGIN_SRC shell

➜  ~ source activate anaconda3

#+END_SRC

then call jupyter

#+BEGIN_SRC shell

➜  ~ jupyter notebook

#+END_SRC

Go to emacs and do = M-x ein:notebooklist-login=
Start IPython notebook server.
Hit =M-x ein:notebooklist-open= to open notebook list. This will open notebook
list buffer.
In the notebook list buffer, you can navigate to your folders to [open], or [create], and [delete] notebooks by hitting


** Interactive Performance.

  set of practices that give performers (usually dancers or musicians) control of the media in real time?

 wireless sensors found both in the body of an performer and in the
 theater.

Git:

- Create a Repository
- Create a Branch
- Make a Commit
- Push and Commit.

[[https://guides.github.com/activities/hello-world/][GitHub Hello world]]


[[https://gist.github.com/davfre/8313299][Github example]]

Https://guides.github.com/activities/hello-world/,
Https://gist.github.com/davfre/8313299


** Physical computing

Introduction to physical computing - microcontrollers. Programming
Interactivity (Noble 2012): Chapter 4: Arduino.

Introduction to Raspberry Pi
(https://www.raspberrypi.org/learning/hardware-guide/).

Introduction to Python (https://www.python.org/doc/).


#+BEGIN_QUOTE
Python
#+END_QUOTE

#+BEGIN_SRC python

# Python 3: Fibonacci series up to n
 def fib(n):
     a, b = 0, 1
     while a < n:
         print(a, end=' ')
         a, b = b, a+b
     print()
 fib(1000)

#+END_SRC

** Raspberry Pi

 
Linux operating system such as DebianJessie,



** Hardware set up

[[http://supercollider.github.io/development/building-raspberrypi][Building from Source on Raspberry]]

#+BEGIN_QUOTE
- connect an ethernet cable from the network router to the rpi
- insert the sd card and usb soundcard
- last connect usb power from a 5V@1A power supply

#+END_QUOTE

** Login & preparations

#+BEGIN_SRC shell
$ ssh pi@raspberrypi.local #from your laptop, default password is raspberry
$ sudo raspi-config #change password, expand file system, reboot and log in again with ssh
#+END_SRC

#+BEGIN_QUOTE
update the system, install required libraries & compilers
#+END_QUOTE

#+BEGIN_SRC shell
$sudo apt-get update

$sudo apt-get upgrade

$sudo apt-get install alsa-base libicu-dev libasound2-dev libsamplerate0-dev libsndfile1-dev libreadline-dev libxt-dev libudev-dev libavahi-client-dev libfftw3-dev cmake git gcc-4.8 g++-4.8

#+END_SRC

#+BEGIN_QUOTE
compile & install jackd (no d-bus)
#+END_QUOTE

#+BEGIN_SRC shell
$git clone git://github.com/jackaudio/jack2 --depth 1
$cd jack2
$./waf configure --alsa #note: here we use the default gcc-4.9
$./waf build
$sudo ./waf install
$sudo ldconfig
$cd ..
$rm -rf jack2
$sudo nano /etc/security/limits.conf #and add the following two lines at the end
    * @audio - memlock 256000
    * @audio - rtprio 75
 exit #and log in again to make the limits.conf settings work

#+END_SRC

#+BEGIN_QUOTE
compile & install sc master
#+END_QUOTE

#+BEGIN_SRC shell
$git clone --recursive git://github.com/supercollider/supercollider
#optionally add –depth 1 here if you only need master
$cd supercollider
$git submodule init && git submodule update
$mkdir build && cd build
$export CC=/usr/bin/gcc-4.8 #here temporarily use the older gcc-4.8
$export CXX=/usr/bin/g++-4.8
$cmake -L -DCMAKE_BUILD_TYPE="Release" -DBUILD_TESTING=OFF -DSSE=OFF -DSSE2=OFF
-DSUPERNOVA=OFF -DNOVA_SIMD=ON -DNATIVE=OFF -DSC_ED=OFF
-DSC_WII=OFF -DSC_IDE=OFF -DSC_QT=OFF -DSC_EL=OFF -DSC_VIM=OFF
-DCMAKE_C_FLAGS="-mtune=cortex-a7 -mfloat-abi=hard -mfpu=neon
-funsafe-math-optimizations" 
-DCMAKE_CXX_FLAGS="-mtune=cortex-a7 -mfloat-abi=hard -mfpu=neon
-funsafe-math-optimizations" ..
$make -j 4 #leave out flag j4 on single core rpi models
$sudo make install
$sudo ldconfig
$cd ../..
$rm -rf supercollider
$sudo mv /usr/local/share/SuperCollider/SCClassLibrary/Common/GUI
/usr/local/share/SuperCollider/SCClassLibrary/scide_scqt/GUI
$sudo mv /usr/local/share/SuperCollider/SCClassLibrary/JITLib/GUI
/usr/local/share/SuperCollider/SCClassLibrary/scide_scqt/JITLibGUI
#+END_SRC

#+BEGIN_QUOTE
start jack & sclang & test
#+END_QUOTE

#+BEGIN_SRC shell
$jackd -P75 -dalsa -dhw:1 -p1024 -n3 -s -r44100 & 
#edit -dhw:1 to match your soundcard. usually it is 1 for usb, or,jackd -P75-dalsa -dhw:UA25EX -p1024
-n3 -s -r44100 &
$sclang #should start sc and compile the class library with 
only 3 harmless class overwrites warnings
    $s.boot #should boot the server
    $ a= {SinOsc.ar([400, 404])}.play #should play sound in both channels
    $ a.free
     {1000000.do{2.5.sqrt}}.bench #benchmark: ~0.89 for rpi2, ~3.1 for rpi1
    $ a= {Mix(50.collect{RLPF.ar(SinOsc.ar)});DC.ar(0)}.play#benchmark
    $ s.dump #avgCPU should show ~19% for rpi2 and ~73% for rpi1
    $ a.free
    $ 0.exit #quit sclang
$ pkill jackd #quit jackd
#+END_SRC

* Sensors

Use of sensors: touch, movement, elasticity, camera.

Programming Interactivity (Noble 2012): Chapter 14, Detection and
Gestures.

In this lesson, students will experiment with various sensors and
conclusions will be discussed regarding their use in the design of
interactive audio systems.

They will also come in contact with Arduino and experiment with some
examples (https://www.arduino.cc/en/Tutorial/BuiltInExamples).

Using Python-for OSC communication libraries (https://pypi.python.org/pypi/python-osc) - with SuperCollider.


* Suggested Bibliography

** Books

